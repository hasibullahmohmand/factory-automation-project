@page "/order"
@inject IUnitOfWork unitOfWork
@rendermode InteractiveServer
@inject NavigationManager Navigation


<PageTitle>Orders</PageTitle>

<div class="page-top">
    <div class="search-bar"> 
        <input type="search" @bind="searchText" name="search-bar" @onkeypress="OnKeyPress" placeholder="Search" />
        <button @onclick="() => Search(searchText)"><img src="/icons/find.png" /></button>
    </div>
    <div class="navigation-item">
        <NavLink href="order">
            <div class="order-icon">
                <img src="/icons/order.png" />
            </div> 
            <div>
                Order
            </div>
        </NavLink>
    </div>
    <div class="navigation-item">
        <NavLink href="cart">
            <div>
                <img src="/icons/shopping-cart.png" />
            </div> 
            <div>
                Cart
            </div>
        </NavLink>
    </div>
    <AuthorizeView Roles="ADMIN">
        <Authorized>
            <div class="navigation-item">
                <NavLink href="admin/products">
                    <div class="admin-icon">
                        <img src="/icons/users.png" />
                    </div>
                    <div>Admin</div>
                </NavLink>
            </div>
        </Authorized>
    </AuthorizeView>
    <div class="navigation-item">
        <NavLink href="logoutcontrol">
            <div class="logout-icon">
                <img src="/icons/logout.png" />
            </div>
            <div>
                Logout
            </div>
        </NavLink>
    </div>
</div>


<h3 class="heading">Orders</h3>
<div class="order-main-container">
    @if (orderProducts == null)
    {
        <div>Loading...</div><div><i class="fas fa-spinner fa-spin"></i></div>
    }
    else
    {
        @foreach (var orderProduct in orderProducts)
        {
            <div class="order-container">
                <div class="order-img">
                    <img src="@orderProduct.cart.product.ImageUrl" alt="Product image" />
                </div>
                <div class="order-details">
                    <div><b>@orderProduct.cart.product.Name</b></div>
                @orderProduct.cart.product.Description
                <div><strong>Price:</strong> @((orderProduct.cart.quantity / 50) * orderProduct.cart.product.Price) TL</div>
                <div>
                    <strong>Quantity:</strong> @orderProduct.cart.quantity
                        @if (orderProduct.delivered == true)
                        {
                            <span class="text-success delivered-bage"><i class="fas fa-check-circle">Deliverd</i></span>
                        }
                        else
                        {
                            <span class="text-primary delivered-bage"><i class="fas fa-spinner fa-pulse"></i>Preparing your order</span> 
                        }
                </div>
                <div><strong>Order Date:</strong> @orderProduct.orderDate</div>
            </div>
        </div>    
        }
}
</div>

@code {
    private List<ResultOrderDto> orderProducts = [];
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        orderProducts = await unitOfWork.OrderService.GetOrdersByUserAsync();
    }

    private void Search(string searchText)
    {
        Navigation.NavigateTo($"/search/{searchText}");
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Search(searchText);
        }
    }

}
