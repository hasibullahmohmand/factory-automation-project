@page "/search/{searchText}"
@inject IUnitOfWork unitOfWork
@inject NavigationManager Navigation

<PageTitle>@searchText</PageTitle>

<div class="page-top">
    <div class="search-bar"> 
        <input type="search" @bind="searchInput" name="search-bar" @onkeypress="OnKeyPress" placeholder="Search" />
        <button @onclick="() => Search(searchInput)"><img src="/icons/find.png" /></button>
    </div>
    <div class="navigation-item">
        <NavLink href="order">
            <div class="order-icon">
                <img src="/icons/order.png" />
            </div> 
            <div>
                Order
            </div>
        </NavLink>
    </div>
    <div class="navigation-item">
        <NavLink href="cart">
            <div>
                <img src="/icons/shopping-cart.png" />
            </div> 
            <div>
                Cart
            </div>
        </NavLink>
    </div>
    <AuthorizeView Roles="ADMIN">
        <Authorized>
            <div class="navigation-item">
                <NavLink href="admin/products">
                    <div class="admin-icon">
                        <img src="/icons/users.png" />
                    </div>
                    <div>Admin</div>
                </NavLink>
            </div>
        </Authorized>
    </AuthorizeView>
    <div class="navigation-item">
        <NavLink href="logoutcontrol">
            <div class="logout-icon">
                <img src="/icons/logout.png" />
            </div>
            <div>
                Logout
            </div>
        </NavLink>
    </div>
</div>


@if (!String.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger message" role="alert">
        <i class="fas fa-exclamation-circle"></i>
        @errorMessage
    </div>
}

@if (!String.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-info message" role="alert">
        <i class="fas fa-check-circle"></i>
        @successMessage
    </div>
}
<h3 class="heading">Search Results for: "@searchText"</h3>
<div class="main-container">

    <div class="border p-3 overflow-auto">
        @if (searchProducts == null)
        {
            <p>Loading...</p>
        }
        else if (!searchProducts.Any())
        {
            <p>No results found for "@searchText".</p>
        }
        else
        {
            @foreach (var product in searchProducts)
            {
                <div class="product-container rounded-2">
                    <div class="product-img">
                        <img src="@product.ImageUrl" alt="Product Image" />
                    </div>
                    <div class="product-name">
                        <b>@product.Name</b>
                    </div>
                    <div class="product-price">
                        @product.Price TL
                    </div>
                    <div class="product-detail">
                        @product.Description
                    </div>

                    <button class="btn btn-outline-info btn-primary text-light" @onclick="() => AddToCart(product.Id)">
                        <i class="fas fa-shopping-cart me-2"></i> Add To Cart
                    </button>
                </div>

            }
        }
    </div>
</div>


@code {
    [Parameter]
    public string searchText { get; set; } = string.Empty;

    private CreateCartDto createCartDto = new();
    private List<ResultProductDto> searchProducts = [];
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string searchInput = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        var allProducts = await unitOfWork.ProductService.GetAllProductsAsync();
        searchProducts = allProducts
            .Where(p => !string.IsNullOrWhiteSpace(p.Name) &&
                        p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task AddToCart(int productId)
    {
        createCartDto.productId = productId;
        var result = await unitOfWork.CartService.CreateCartAsync(createCartDto);
        if (!result)
        {
            errorMessage = "An error occurred!";
        }
        else
        {
            successMessage = "Product added to cart!";
        }
    }

    private void Search(string searchText)
    {
        Navigation.Refresh();
        Navigation.NavigateTo($"/search/{searchText}");
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Search(searchText);
        }
    }
}
