@page "/account/login"

@layout AuthLayout
@inject IUnitOfWork _unitofwork
@inject ILocalStorageService  _localstorageService
@inject NavigationManager _navigationManager
@rendermode InteractiveServer 

<PageTitle>Login</PageTitle>

<div class="form-container">
    <div class="mb-3 title">
        <h4 class="text-center">
            <i class="fas fa-sign-in-alt me-2"></i>
            Login
        </h4>
    </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="alert alert-info text-center" role="alert">
            Please enter your email and password.
        </div>
    }
    <EditForm Model="loginModel" OnValidSubmit="LoginUser" Enhance>
        <DataAnnotationsValidator />
        <div class="d-grid col-auto">
            <div class="my-3">
                <label class="form-label">Email</label>
                <InputText type="email" @bind-Value="loginModel.email" class="@GetInputClass(nameof(loginModel.email))"
                placeholder="email@example.com" />
                <ValidationMessage For="@(() => loginModel.email)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText type="password" @bind-Value="loginModel.password"
                class="@GetInputClass(nameof(loginModel.password))" placeholder="Password" />
                <ValidationMessage For="@(() => loginModel.password)" />
            </div>
            <div class="d-grid justify-content-center">
                <div>Don't have an account yet? <a href="account/register">Register</a></div>
                <button type="submit" class="btn btn-primary m-4">

                    <i class="fa fa-sign-in-alt"></i>
                    <span class="ms-2">Login</span>
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {

    [Inject]
    private  IJSRuntime jS{ get; set; }
    private string? errorMessage = String.Empty;
    [SupplyParameterFromForm(FormName = "LoginForm")]
    private LoginModel loginModel { get; set; } = new();
    [CascadingParameter] private EditContext? editContext { get; set; }
    private bool _isInitialized { get; set; } = false;
    private bool _isReadyForStorage{ get; set; }

    private string? _tokenStore{ get; set; }


    private async Task LoginUser()
    {
        try
        {
            var token = await _unitofwork.AuthService.LoginAsync(loginModel)!;
            if (!String.IsNullOrEmpty(token))
            {
                // await _localstorageService.SetItemAsStringAsync("authenticationToken", token);
                _navigationManager.NavigateTo($"/loginControl?token={token}", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid email or password.";
                StateHasChanged();
            }

        }catch(Exception ex)
        {
            await jS.InvokeVoidAsync("console.log", $"{ex}");
        }
    }
    private string GetInputClass(string fieldName)
    {
        if (editContext == null)
            return "form-control form-input";
        var fieldIdentifier = new FieldIdentifier(loginModel, fieldName);
        var fieldState = editContext.GetValidationMessages(fieldIdentifier);

        if (fieldState.Any())
            return "form-control form-input is-invalid";
        else
            return "form-control form-input";
    }
}
