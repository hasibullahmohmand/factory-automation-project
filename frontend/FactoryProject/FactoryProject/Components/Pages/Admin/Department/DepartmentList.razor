@page "/admin/departments"
@layout AdminLayout
@attribute [Authorize(Roles = "ADMIN")]
@rendermode InteractiveServer
@implements IDisposable
@inject DepartmentStateService _departmentStateService
@inject IUnitOfWork _unitOfWork


<PageTitle> Departments </PageTitle>
<HeadContent>
    <link href="/css/listing.css" rel="stylesheet" />
</HeadContent>

@if (_departments == null)
{
    <p> <em> Loading...</em></p>
}
else
{
    <div class="container mx-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="entete">
                <h4 class="title"><i class="fas fa-list me-2"></i>List of Departments</h4>
                <a href="admin/createdepartment" class="btn btn-outline-primary ms-2">
                    <i class="fas fa-plus"></i>
                    Add New Department
                </a>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fa-solid fa-triangle-exclamation"></i>
                @errorMessage
            </div>
        }

        @if (!String.IsNullOrEmpty(_departmentStateService.SuccessMessage))
        {
            <div class="alert alert-info" role="alert">
                <i class="fa-solid fa-circle-check"></i>
                @_departmentStateService.SuccessMessage
            </div>
        }
        <div class="container margin-auto mb-3 table-responsive tableau">
            <table class="table table-hover table-striped table-sm ">
                <thead class="rounded-3 table-header">
                    <tr>
                        <th>N°</th>
                        <th>Name</th>
                        <th>Salary</th>
                        <th>Operations</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        count = 0;
                    }
                    @foreach (var department in _departments)
                    {
                        count++;
                        <tr class="text-nowrap">
                            <td>@count</td>
                            <td>@department.name</td>
                            <td>@department.salary</td>
                            <td>
                                <div class="btn btn-group">
                                    <button class="btn btn-danger" @onclick="() => Delete(department.id)">
                                        <i class="fa fa-trash me-1"></i>
                                        Delete
                                    </button>
                                    <a href="admin/editdepartment/@department?.id" class="btn btn-success">
                                        <i class="fa fa-edit me-1"></i>
                                        Update
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

}

@code {
    private List<ResultDepartmentDto> _departments { get; set; } = [];
    private string? errorMessage { get; set; } = string.Empty;
    private int count { get; set; }
    private IJSRuntime JS { get; set; }
    protected async override Task OnInitializedAsync()
    {
        if (!_departmentStateService.Models.Any())
        {
            await GetAllDepartments();
        }
        else
        {
            _departments = _departmentStateService.Models;
        }
        _departments = await _unitOfWork.DepartmentService.GetAllDepartmentAsync();
        _departmentStateService.OnModelsChanged += StateHasChanged;
    }
    protected override void OnParametersSet()
    {
        if (_departmentStateService.Models != null && _departmentStateService.Models.Count > 0)
        {
            count = 0;
            _departments = _departmentStateService.Models;
        }
    }
    public void Dispose()
    {
        _departmentStateService.OnModelsChanged -= StateHasChanged;
    }

    private async Task GetAllDepartments()
    {
        _departments = await _unitOfWork
                        .DepartmentService
                        .GetAllDepartmentAsync();
    }
    private async Task Delete(int id)
    {
        try
        {
            var department = _departments.FirstOrDefault(p => p.id == id);
            await _unitOfWork.DepartmentService.DeleteDeprtmentAsync(id);
            _departmentStateService.RemoveItem(department);
            _departments = _departmentStateService.Models;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", ex);
            errorMessage = "Failed to deleted this item";
            await Task.Run(async () =>
            {
                await Task.Delay(1000);
                errorMessage = string.Empty;
            });
        }
    }



}
