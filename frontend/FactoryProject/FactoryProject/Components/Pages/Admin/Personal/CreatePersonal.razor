@page "/admin/createpersonal"
@using FactoryProject.Infrastructure.Utilities.Services

@layout AdminLayout
@inject IUnitOfWork _unitOfWork
@inject PersonalStateService _personalStateService
@inject NavigationManager _navigationManager
@rendermode InteractiveServer
<!-- Header Content Begin-->
<PageTitle>Create Personal</PageTitle>

<!-- Header Content End-->

<div class="form-container mx-3">
    <h4 class="title text-center"><i class="fas fa-plus me-2"></i>Adding Personal</h4>
    <hr class="mb-4" />
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle"></i>
            @errorMessage
        </div>
    }
    <div class="mx-4">
        <EditForm FormName="CreateForm" Model="@personal" OnValidSubmit="@CreatePersonalAsync" Enhance>
            <DataAnnotationsValidator />

            <div class="mb-3 form-div">
                <label for="personalName" class="form-label">Personal Name</label>
                <InputText type="text" class="@GetInputClass(nameof(personal.name))"
                id="personalName" placeholder="Enter Personal Name" @bind-Value="personal.name" />
                <ValidationMessage For="@(() => personal.name)" class="text-danger" />
            </div>
            <div class="mb-3 form-div">
                <label for="personalIdentifier" class="form-label">Identifier</label>
                <InputText type="text" class="@GetInputClass(nameof(personal.identifier))"
                id="personalIdentifier" placeholder="Enter Personal Identifier" @bind-Value="personal.identifier" />
                <ValidationMessage For="@(() => personal.identifier)" class="text-danger" />
            </div>  
            <div class="mb-3 form-div">
                <label for="personalAge" class="form-label">Age</label>
                <InputNumber  class="@GetInputClass(nameof(personal.age))"
                id="personalAge" placeholder="Enter Personal Age" @bind-Value="personal.age" />
                <ValidationMessage For="@(() => personal.age)" class="text-danger" />
            </div>
            <div class="mb-3 form-div">
                <label for="personalStartDate" class="form-label">Start Date</label>
                <InputDate  class="@GetInputClass(nameof(personal.date))"
                id="personalStartDate" placeholder="Enter Start Date" @bind-Value="personal.date" />
                <ValidationMessage For="@(() => personal.date)" class="text-danger" />
            </div> 
            <div class="mb-3 form-div">
                <label class="form-label">Gender</label>
                <div class="d-flex justify-content-between">
                    <InputRadioGroup @bind-Value="personal.gender">
                        <label>
                            <InputRadio Value=1 class="form-check-input" /> Male
                        </label>
                        <label>
                            <InputRadio Value=0 class="form-check-input" /> Female
                        </label>
                    </InputRadioGroup>
                </div>
            </div>
            <div class="mb-3 form-div">
                <label for="prod" class="form-label">Department</label>
                <InputSelect type="number" class="form-control " id="bookCategory" @bind-Value="personal.departmentId">
                    <option value="">Choose</option>
                    @foreach (var department in _departments)
                    {
                        <option value="@department.id">@department.name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => personal.departmentId)" class="text-danger" />
            </div> 
            <div class="mb-3 form-div">
                <label for="prod" class="form-label">Shift</label>
                <InputSelect type="number" class="form-control " id="bookCategory" @bind-Value="personal.shift">
                    <option value="">Choose</option>
                    <option value="Mornıng">Morning</option>
                    <option value="Evening">Evening</option>
                    <option value="Night">Night</option>
                </InputSelect>
                <ValidationMessage For="@(() => personal.departmentId)" class="text-danger" />
            </div>

            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-plus"></i>
                    Create
                </button>
                <a href="/admin/personals" class="btn btn-secondary ms-2">
                    <i class="fas fa-list"></i>
                    Personals
                </a>
            </div>
        </EditForm>
    </div>

</div>


@code {
    private string? errorMessage{ get; set; }
    [SupplyParameterFromForm(FormName ="CreateForm")]
    private PersonalForInsertionDto personal { get; set; } = new();
    [CascadingParameter]
    private EditContext? editContext{ get; set; }
    private List<ResultDepartmentDto> _departments = [];
    protected async override Task OnInitializedAsync()
    {
        _departments = await _unitOfWork
                            .DepartmentService
                            .GetAllDepartmentAsync();
    }
    private async Task CreatePersonalAsync()
    {
        var departement = await _unitOfWork
        .DepartmentService
        .GetDepartmentByIdAsync(personal.departmentId);
        var personel = new CreatePersonalDto
        {
            name=personal.name,
            department=departement,
            age=personal.age,
            gender=personal.gender,
            date=personal.date,
            identifier=personal.identifier,
            shift=personal.shift
        };
        var result = await _unitOfWork
                                .PersonalService
                                .CreatePersonalAsync(personel);
        if (!result)
        {
            errorMessage = "An occured when trying to add this item";
            StateHasChanged();
            return;
        }
        _personalStateService.AddPersonal(new ResultPersonalDto
        {
           name = personal.name,
           department = departement,
           age = personal.age,
           gender = personal.gender,
           date = personal.date,
           identifier = personal.identifier,
           shift = personal.shift,
        });
        _navigationManager.NavigateTo("admin/personals");
    }
    private string GetInputClass(string fieldName)
    {
        if (editContext == null) return "form-control form-input";
        // Check if the field is valid
        var fieldIdentifier = new FieldIdentifier(personal, fieldName);
        var isInvalid = editContext?.GetValidationMessages(fieldIdentifier).Any() == true;
        return isInvalid ? "form-control form-input invalid" : " form-control form-input";
    }


}
