@page "/admin/personals"
@using FactoryProject.Infrastructure.Utilities.Services
@layout AdminLayout
@attribute [Authorize(Roles ="ADMIN")]
@rendermode InteractiveServer

@inject IUnitOfWork _unitOfWork
@inject PersonalStateService _personalStateService
<PageTitle> Personals</PageTitle>

<div class="container mx-2">
     <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="entete">
                <h4 class="title"><i class="fas fa-list me-2"></i>List of Personals</h4>
                <a href="admin/createpersonal" class="btn btn-outline-primary ms-2">
                    <i class="fas fa-plus"></i>
                    Add New Personal
                </a>
            </div>
     </div>
             @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle"></i>
            @errorMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(_personalStateService.SuccessMessage))
    {
        <div class="alert alert-success" role="alert">
            <i class="far fa-check-circle"></i>
            @_personalStateService.SuccessMessage
        </div>
    }
    <div class="container margin-auto mb-3 table-responsive tableau">
        <table class="table table-hover table-striped table-sm ">
            <thead class="rounded-3 table-header">
                <tr>
                    <th>NÂ°</th>
                    <th>Identifier</th>
                    <th>Name</th>
                    <th>Shift</th>
                    <th>Department</th>
                    <th>Start Date</th>
                    <th>Operations</th>
                </tr>
            </thead>
            <tbody>
                @{
                    count = 0;
                }
                @foreach (var personal in _personals)
                {
                    count++;
                    <tr class="text-nowrap">
                        <td>@count</td>
                        <td>@personal.identifier</td>                          
                        <td>@personal.name</td>
                        <td>@personal.shift</td>
                        <td>@personal.department?.name</td>
                        <td>@personal.date.ToShortDateString()</td>
                        <td>
                            <div class="btn btn-group">
                                <button class="btn btn-danger" @onclick="() => Delete(personal.id,count)">
                                    <i class="fa fa-trash me-1"></i> 
                                </button>
                                <a href="admin/editpersonal/@personal?.id" class="btn btn-success">
                                    <i class="fa fa-edit me-1"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



@code{
    private string errorMessage{get;set;}=string.Empty;
    private int count{get;set;}
    private List<ResultPersonalDto> _personals=[];
    private List<ResultDepartmentDto> _departments=[];
    [Inject] private IJSRuntime JS{get;set;}
    protected async override Task OnInitializedAsync()
    {
        if (!_personalStateService.Personals.Any())
        {
            await GetAllPersonels();
            _personalStateService.SetPersonals(_personals);

        }
        else
        {
            _personals = _personalStateService.Personals;
        }
        _personalStateService.OnPersonalsChanged += StateHasChanged;
    }
    protected override void OnParametersSet()
    {
        if (_personalStateService.Personals != null && _personalStateService.Personals.Count > 0)
        {
            count = 0;
            _personals = _personalStateService.Personals;
        }
    }
    private async Task GetAllPersonels()
    {
        _personals=await _unitOfWork
                        .PersonalService
                        .GetAllPersonalAsync();
    }

    private async Task Delete(int id,int cacheIndex)
    {
        try
        {
            await _unitOfWork.PersonalService.DeletePersonalAsync(id);
            _personalStateService.RemovePersonal(id);
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("console.log",ex);
            errorMessage="Failed to deleted this item";
            await Task.Run(async () =>
             {
                 await Task.Delay(1000);
                 errorMessage=string.Empty;
                 StateHasChanged();
             });
        }
    }
}



