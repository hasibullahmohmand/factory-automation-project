@page "/admin/createcategory"
@layout AdminLayout
@inject IUnitOfWork _unitOfWork
@inject CategoryStateService _categoryStateService
@inject NavigationManager _navigationManager

<!-- Header Content  Begin-->
<PageTitle>Create Category</PageTitle>



<!-- Header Content  Begin-->
<div class="form-container mx-3">
     <h4 class="title text-center"><i class="fas fa-plus me-2"></i>Adding Category</h4>
    <hr class="mb-4" />
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-triangle-exclamation"></i>
            @errorMessage
        </div>
    }
    <EditForm FormName="CreateForm" Model="@category" OnValidSubmit="@CreateCategoryAsync" Enhance >
        <DataAnnotationsValidator />
        <div class="mb-3 form-div">
            <label for="categoryName" class="form-label">Category Name</label>
            <InputText type="text" class="@GetInputClass(nameof(category.name))" 
            id="categoryName" placeholder="Enter Category Name" @bind-Value="category.name"/>
            <ValidationMessage For="@(() => category.name)" class="text-danger" />
        </div>
         <div class="d-flex justify-content-center">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-plus"></i>
                Create
            </button>
            <a href="/admin/categories" class="btn btn-secondary ms-2">
            <i class="fas fa-list"></i>
                Categories
            </a>
         </div>
    </EditForm>
    
</div>
    
@code{
    private string errorMessage{get;set;}=string.Empty;
    [SupplyParameterFromForm(FormName ="CreateForm")]
    private CreateCategoryDto category{get;set;}=new();
    [CascadingParameter]private EditContext? editContext{get;set;}

    private string GetInputClass(string fieldName)
    {
        if (editContext == null) return "form-control form-input";
        // Check if the field is valid
        var fieldIdentifier = new FieldIdentifier(category, fieldName);
        var isInvalid = editContext?.GetValidationMessages(fieldIdentifier).Any() == true;
        return isInvalid ? "form-control form-input invalid" : " form-control form-input";
    }
    private async Task CreateCategoryAsync()
    {
        var response=await _unitOfWork.CategoryService.CreateCategoryAsync(category);
        if(!response){
            errorMessage="An error occured when trying to create this item";
            StateHasChanged();
            return;
        }
        _categoryStateService.AddItem(new ResultCategoryDto{
            Name=category.name
        });
        _navigationManager.NavigateTo("/admin/categories");
    }
}