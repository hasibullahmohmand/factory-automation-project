@page "/admin/products"
@using FactoryProject.Infrastructure.Utilities.Services
@layout AdminLayout
@attribute [Authorize(Roles ="ADMIN")]
@rendermode InteractiveServer
@inject ProductStateService _productStateService
@inject IUnitOfWork _unitOfWork
@implements IDisposable


<PageTitle> Products </PageTitle>

@if (_products == null)
{
    <p> <em> Loading...</em></p>
}
else
{
    <div class="container mx-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="entete">
                <h4 class="title"><i class="fas fa-list me-2"></i>List of Products</h4>
                <a href="admin/createproduct" class="btn btn-outline-primary ms-2">
                    <i class="fas fa-plus"></i>
                    Add New Product
                </a>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fa-solid fa-triangle-exclamation"></i>
                @errorMessage
            </div>
        }
        @if (!string.IsNullOrEmpty(_productStateService.SuccessMessage))
        {
            <div class="alert alert-success" role="alert">
                <i class="fa-solid fa-circle-check"></i>
                @_productStateService.SuccessMessage
            </div>
        }

        <div class="d-flex margin-auto justify-content-between">
            <div class="input-group mb-3 w-50">
                <input type="text" class="form-control" placeholder="Search something..." aria-label="Search something..."
                aria-describedby="button-addon2">
                <button class="btn btn-outline-primary" type="button" id="button-addon2">
                    <i class="fas fa-search"></i>
                    Search
                </button>
            </div>
            <div>
                <EditForm Model="getProductCategoryById" OnValidSubmit="GetProductsByCategoryId" Enhance FormName="FilteringForm">
                    <div class="input-group mb-3 ms-2">
                        <InputSelect class="form-select" id="inputGroupSelect02" @bind-Value="getProductCategoryById.CategoryId">
                            <option selected>All</option>
                            @foreach(var category in _categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <button class="btn btn-outline-primary" type="submit" id="button-addon2">
                            <i class="fas fa-filter"></i>
                            Filter
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
        <div class="container margin-auto mb-3 table-responsive tableau">
            <table class="table table-hover table-striped table-sm ">
                <thead class="rounded-3 table-header">
                    <tr>
                        <th>NÂ°</th>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Stock</th>
                        <th>Operations</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        count = 0;
                    }
                    @foreach (var product in _products)
                    {
                        count++;
                        <tr class="text-nowrap">
                            <td>@count</td>
                            <td>
                                <img src="@product.ImageUrl" style="width: 20px; height:20px; border-radius: 50%;">
                            </td>
                            <td>@product.Name</td>
                            <td>
                                <button type="button" class="btn btn-info text-light" data-bs-toggle="modal" 
                                data-bs-target="#modal_@product.Id">
                                    Description
                                </button>
                            </td>
                            <td>@product.Price</td>
                            <td>@product.Stock</td>
                            <td>
                                <div class="btn btn-group">
                                    <button class="btn btn-danger" @onclick="() => Delete(product.Id)">
                                        <i class="fa fa-trash me-1"></i> 
                                    </button>
                                    <a href="admin/editProduct/@product?.Id" class="btn btn-success">
                                        <i class="fa fa-edit me-1"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="container">
            <div class="btn-group">
                <input type="button" class="btn btn-primary" value="1"/>
            </div>
        </div>
    </div>

    @foreach(var item in _products)
    {
        <div class="modal fade" id="modal_@item.Id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="d-flex">
                            <img class="@item.ImageUrl" style="width: 20px; height:20px; border-radius: 50%;" />
                            <h1 class="modal-title fs-5 text-center" id="exampleModalLabel">@item.Name</h1>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <b>Category: <span class="text-primary">@item.Category?.Name</span></b>
                        <br>
                        <p >@item.Description</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private string errorMessage { get; set; } = String.Empty;
    private List<ResultProductDto> _products = [];
    private List<ResultCategoryDto> _categories=[];
    [SupplyParameterFromForm(FormName ="FilteringForm")]
    private GetProductCategoryDto? getProductCategoryById {get;set;}=new();
    private int count { get; set; }
    [Inject] private IJSRuntime JS{ get; set; }

    protected async override Task OnInitializedAsync()
    {
        if (!_productStateService.Models.Any())
        {
            await GetAllProducts();
        }
        else
        {
            _products = _productStateService.Models;
        }
        _categories=await _unitOfWork.CategoryService.GetAllCategoriesAsync();
        _productStateService.OnModelsChanged += StateHasChanged;
    }
    protected override void OnParametersSet()
    {
        if (_productStateService.Models != null && _productStateService.Models.Count > 0)
        {
            count = 0;
            _products = _productStateService.Models;
        }
    }
    private async Task GetAllProducts()
    {
        _products=await _unitOfWork
                        .ProductService
                        .GetAllProductsAsync();
        _productStateService.SetItems(_products);
    }

    private async Task Delete(int id)
    {
        try
        {
            var product= _products.FirstOrDefault(p=>p.Id==id);
            await _unitOfWork.ProductService.DeleteProductAsync(id);
            _productStateService.RemoveItem(product);
            _products = _productStateService.Models;
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("console.log",ex);
            errorMessage="Failed to deleted this item";
            await Task.Run(async () =>
             {
                 await Task.Delay(1000);
                 errorMessage=string.Empty;
             });
        }
    }

    public void Dispose()
    {
        _productStateService.OnModelsChanged -= StateHasChanged;
    }

    private async Task GetProductsByCategoryId()
    {
        var products= await _unitOfWork
                        .ProductService
                        .GetProductByCateogryIdAsync(getProductCategoryById.CategoryId);
    }

}
