@page "/admin/createProduct"
@layout AdminLayout
@attribute [Authorize(Roles="ADMIN")]
@inject IUnitOfWork _unitOfWork
@inject ProductStateService _productStateService
@rendermode InteractiveServer
@inject NavigationManager _navigationManager

<PageTitle>Create Product</PageTitle>

<div class="form-container mx-3">
    <h4 class="title text-center"><i class="fas fa-plus me-2"></i>Adding Product</h4>
    <hr class="mb-4" />
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle"></i>
            @errorMessage
        </div>
    }
    <EditForm FormName="CreateForm" Model="@product" OnValidSubmit="@CreateProductAsync" Enhance >
        <DataAnnotationsValidator />
        <div class="mb-3 form-div">
            <label for="productName" class="form-label">Product Name</label>
            <InputText type="text" class="@GetInputClass(nameof(product.name))" 
            id="produtName" placeholder="Enter Product Name" @bind-Value="product.name"/>
            <ValidationMessage For="@(() => product.name)" class="text-danger" />
        </div>
        <div class="mb-3 form-div">
            <label for="productPrice" class="form-label">Price</label>
            <InputNumber type="number" class="@GetInputClass(nameof(product.price))"
            id="productPrice" placeholder="Enter Price" @bind-Value="product.price" />
            <ValidationMessage For="@(() => product.price)" class="text-danger" />
        </div>
        <div class="mb-3 form-div">
            <label for="productStock" class="form-label">Stock</label>
            <InputNumber type="number" class="@GetInputClass(nameof(product.stock))"
            id="productStock" placeholder="Enter Price" @bind-Value="product.stock" />
            <ValidationMessage For="@(() => product.stock)" class="text-danger" />
        </div>
        <div class="mb-3 form-div">
            <label for="productImage" class="form-label">Image</label>
            <InputText class="@GetInputClass(nameof(product.imageUrl))"
            id="productImage" placeholder="Enter Image Url" @bind-Value="product.imageUrl" />
            <ValidationMessage For="@(() => product.imageUrl)" class="text-danger" />
        </div>
        <div class="mb-3 form-div">
            <label for="productImage" class="form-label">Select Ingredients :</label>
            <div class="row">
                @foreach(var ingredient in _ingredients)
                {
                    <div class="col-lg-3 col-md-4 col-sm-6">
                        <label class="form-label">
                            <input type="checkbox"
                            placeholder="Enter Image Url" value="ingredient.id" 
                            @onchange="e =>ToggleIngredientHandler(ingredient.id,e.Value?.ToString() )" />
                            @ingredient.name
                        </label>
                    </div>

                }
            </div>
            <ValidationMessage For="@(() => product.stock)" class="text-danger" />
        </div>

        <div class="mb-3 form-div">
            <label for="productStock" class="form-label">Description</label>
            <InputTextArea class="@GetInputClass(nameof(product.description))"
            id="productStock" placeholder="Enter Description" @bind-Value="product.description">
            </InputTextArea>
            <ValidationMessage For="@(() => product.description)" class="text-danger" />
        </div>

        <div class="mb-3 form-div">
            <label for="prod" class="form-label">Category</label>
            <InputSelect type="number" class="form-control " id="bookCategory" @bind-Value="product.CategoryId">
                <option value="">Choose</option>
                @foreach (var category in _categories)
                {
                    <option value="@category.id">@category.name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => product.CategoryId)"class="text-danger" />
        </div>
        <div class="d-flex justify-content-center">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-plus"></i>
                Create
            </button>
            <a href="/admin/products" class="btn btn-secondary ms-2">
                <i class="fas fa-list"></i>
                Products
            </a>
        </div>
    </EditForm>
</div>


@code{
    private string errorMessage{get;set;}=string.Empty;
    [SupplyParameterFromForm(FormName="CreateForm")]
    private ProductForInsertionDto product{get;set;}=new();
    private ProductForInsertionWithIngredientDto productDto=new();
    [CascadingParameter]
    private EditContext? editContext {get;set;}
    private List<ResultIngredientDto> _ingredients{get;set;}=[];
    private List<ResultCategoryDto> _categories{get;set;}=[];
    protected override async Task OnInitializedAsync()
    {
        _categories=await _unitOfWork
                    .CategoryService
                    .GetAllCategoriesAsync();
        _ingredients=await _unitOfWork.IngredientService.GetAllIngredientsAsync();

    } 
    private async Task CreateProductAsync()
    {
        productDto.product=new CreateProductDto
        {
            name=product.name,
            price=product.price,
            description=product.description,
            stock=product.stock,
            category=await _unitOfWork.CategoryService.GetCategoryByIdAsync(product.CategoryId),
            imageUrl=product.imageUrl
        };
        productDto.ingredientIds=product.ingredientIds;
        var response= await _unitOfWork.ProductService.CreateProductAsync(productDto);
        if(!response){
            errorMessage="An error occured when trying to add this item";
            StateHasChanged();
            return;
        }
        _productStateService.AddProduct( new ResultProductDto
        {
            Name=productDto.product.name,
            Price=productDto.product.price,
            Description=productDto.product.description,
            ImageUrl=productDto.product.imageUrl,
            Category=productDto.product.category,
            Stock=productDto.product.stock
        });
        _navigationManager.NavigateTo("/admin/products");
    }
    private string GetInputClass(string fieldName)
    {
        if (editContext == null) return "form-control form-input";
        // Check if the field is valid
        var fieldIdentifier = new FieldIdentifier(product, fieldName);
        var isInvalid = editContext?.GetValidationMessages(fieldIdentifier).Any() == true;
        return isInvalid ? "form-control form-input invalid" : " form-control form-input";
    }
    private void ToggleIngredientHandler(int ingredientId, string? isChecked)
    {
        bool isSeleted= isChecked=="True" || isChecked=="On";
        if(isSeleted){
            if(product.ingredientIds is null)
            {
                product.ingredientIds.Add(ingredientId);
                return;
            }
            if(!product.ingredientIds.Contains(ingredientId))
            {
                product.ingredientIds.Add(ingredientId);
            }
        }
        else
        {
            if (product.ingredientIds is not null && product.ingredientIds.Contains(ingredientId))
            {
                product.ingredientIds.Remove(ingredientId);
            }
            
        }

    }
}